* Proven Practices *                 -*- muse -*-

Tips for writing great software

There is a huge difference between great software and lousy
software. People notice!  Customers notice that it is effortless to
use.  It does exactly what it supposed to do.  It has exactly the
right feature set. It is easy to learn and a joy to use each day.
Great software becomes an extension of everyday life.  You stop noticing
that you are using it because it is so intuitive.

The irony is that shareholder also notice.  Low quality software is
also much more expensive to produce and maintain. High quality reduces
cost while increasing the acceptance.  The overall return on
investment of software is primarily determined by its quality.

In the ideal world, there would only be room for high quality
software.  This is defined as software that does exactly what it needs
to do.  A lot of software does not measure up.  It is either full of
bugs and limitations, or bloated with gratuitous features that no one
needs.

Great software is simple.  A perfect piece of software knows what you
are thinking an has a single command 'do-it' that does exactly what
you need.  This is not practical (the mind-reading part).  But it is
realistic to have a small number of features that let you perform
tasks simply.

The key to producing great software is understanding the essence of
what you are creating.  What does this thing need to do?  Can you make
it simpler and still capture the core function of the software?
Beautiful software is always the essential part without the
gratuitous part.

Producing great software requires craftsmanship. There are tools and
techniques that can increase your odds of success.  In fact there are
processes that can guarantee your success.  Learn these and prosper.

I've spent my entire career developing professional software.  There
is a huge difference in the results produce by those who are craftsmen
and those to hack things together.  The gap is phenomenal.

You can understand and apply the basic principles of great software.
Even when you are working on a small personal project you want to be a
craftsman. Why would you want to waste your own time or money?

A large software project can not be successful if these principles are
not followed.  I once worked on a software project with 700 people
distributed worldwide.  It is possible to have large projects that are
well organized, but this was not.

It is vital to understand these principles.  Without them your next
project will be an experience of pain.  Failed projects leave in their
wake failed careers, failed marriages, and failed companies. Why go
there?

Somethings are complex and difficult to understand.  Writing great
software is simple.  It is easy to understand.  However, it is hard to
do because it required discipline.  You need to be constantly looking
out for certain things.  It is not complex but it is hard.

The stakes are high.  Once you know how to produce high quality
software you will never accept less.  These principles will drive the
success of the rest of your career.  There is always room for people
that create things that others need.



