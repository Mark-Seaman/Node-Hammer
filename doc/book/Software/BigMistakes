* Biggest Programmer Mistakes *     -*- muse -*-

This article is about the difference between bad programming and good
programming.  The productivity level that separates the most best and
the worst programmers is truly phenomenal.  Here you will find out the
underlying causes for the difference in output.  Most of the
limitation is driven by the false beliefs of the worst programmers
hold.  This book explores the psychology of programming.

**Motivation**

With over thirty years as a professional software developer I've seen
it all.  There are amazingly productive teams of three people that are
easily able to generate more functionality than a team of twenty.
Some programmers actually reduce the output of the team.  Removing
these programmers from the team can increase the teams production.

Each programmer has their own style.  But there is a similarity in the
way that the best developers work.  They have a commitment to quality.
The way that they work is characterized by adherence to best practices
that limit the risk.

**Background**

I spent most of my career at Hewlett-Packard as a software developer.
I worked mostly on firmware and software for consumer products.  These
included application software for scanner, digital cameras, OCR, and
printers, and firmware for disk drives.

HP historically has had some very talented software engineering.  But
I was perplexed by how often good programmers would make bad mistakes.
These were easily recognized and prevented.  The purpose of this book
is to enhance awareness of what goes wrong so that you can prevent
that from happening to you.

**Power of Paradigm**

Over the years I've observed that the most productive software
developers have a different outlook than the rest.  They view
themselves as craftsmen.  They are committed to producing high quality
work.  They become inpatient with coworkers who slap things together
and throw it over the wall.

There is a world view that drives great programmers. It is based on an
underlying belief that our work is a reflection of our character.
Producing bad software is a loss of integrity.  On the other hand,
doing a great job has a deep emotional reward completely independent
of our salary.

Excellent software developers believe that they can always reach for a
higher performance level.  True mastery comes only through diligent
pursuit of best practices.  Optimization is the result of a series of
new tricks that are learned, applied and then passed on others.
