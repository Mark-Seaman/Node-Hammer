* Strategic Testing *                 -*-muse-*-

**Reduce your costs**

Most companies do what I call, 'Tactical Testing'.  When a product is getting ready for release we
exercise the system by trying to make it do everything that it is supposed to do.  This is a necessary
type of testing but it stops far short of what is really needed.

If you want to reduce the cost of your software you should rethink how you test.  There is far more
at stake than just the cost of testing.  The greater cost of poor testing is market success and
maintenance cost for the development team.  Much of what we consider development cost is actually
related to the results of poor testing.

**Strategic Testing Mindset**

Adopting a strategic view of testing requires a significant change in mindset.  This must be driven
by an understanding of the economics of software development.  At each subsequent stage of the
lifecyle, defects are significantly more expensive. What takes one minute during design, will take
one hour during code, and a day during the test phase.  If this defect makes it to customers it may
take a month to repair the damage.

Most people fail to understand this reality at a gut level so they shift development resources away
from testing to building new features.  As the products mature they produce an intractable
maintenance burden on the whole organization.

The strategic testing mindset is based on four truths.
 1. Nothing works unless you verify that it works.
 2. Only automatic testing can be run for reasonable costs.
 3. Building test infrastructure has huge payoffs over the lifecycle.
 4. Strategic testing alters both your product architecture and the development process.

**Test everything**

You may have heard the phrase, "Trust but verify". In software develop the maxim should be "Don't
trust, only verify".  Great software developers create a set of assertions about how things must be.
Then they constantly test to see if these assertions hold.  When something unexpected occurs they
consider it an error.  It may be a false assumption or a defect in the implementation of the
system.

Each action performed should yield the expected result.  And each result should be verified: each
command executed, each file compiled, every database query, and each web page displayed, is an
opportunity to verify that the world is the way that it ought to be.

It is easy to believe that testing is someone else's job.  After all, we hire professional testers
to do the testing and report what they find.  Every defect that is reported represents a potential
failure to find and fix during the development.  Our goal should be to have very frustrated testers
because they find so few issues.

If we have a 'test everything' mentality then we think about development differently.  The
development is done in smaller increments.  It is easy to test a small thing but incredibly difficult to test a
large piece of functionality.  Testing itself forces smaller steps.

**Automatic testing**

Tests must be easy to run, otherwise they will seldom be repeated.  Testing that requires a huge
cost will only be executed once.  Any testing requiring many people running manual tests cannot be
repeated economically.  On the other hand, if your testing is run every hour automatically, then
developers receive email whenever something breaks.

I once worked on a project that had 300 testers (mostly non-technical folks) pushing buttons on
another continent.  The total development costs were very high due to the lack of automation in the
testing process.

Consider developing spheres of testing that can be run at appropriate intervals.  If you don't have
it in place you should start with monthly, weekly, daily, and hourly tests.  The longer tests may
have a longer duration but still not require human effort.  This means that the cost of long-running
tests can be very low.  

Imagine the impact to your project if once a month you could perform comprehensive testing.  You
could run a script to clone your production server and use live data.  Obviously, you must be
careful about how you do these tests.  But consider the impact of regularly verifying the system
integrity at many levels.

By automating testing you shift the task into the development domain.  This means that testing is
designed to all of the same standards that product code is designed to.  It is debugged until it
works properly.  Once debugged it can run every day for the life of the product.

**Building infrastructure**

This strategy will likely pay for itself during the first development cycle. It takes a lot of
effort to think through how to put an existing system under test.  New systems are much easier to
work with because you can implement best practices from the beginning.

Putting a large system under test, is primarily about exposing key interfaces.  By writing
scripts to send data to and from interfaces, you will create automation points. These will have many
other uses for you beyond testing.

Consider building the simplest possible way to get data into an interface.   Think about the natural
vocabulary that the interface speaks.  Develop a canonical list of verbs and nouns that you use for
each new interface you visit.  Simple problems have one noun and four verbs.  Real problems have
more.

Build a command interpreter that allows you to stimulate the interface and a data recorder that
lets you capture the live data.  Think about how to record and playback data in order to remove one
half of the system.

Save data as text.  It is very efficient for version control and writing small data analysis tools.
Each tool you create will give you new opportunities to interact with your system.  These in turn
will guide you through the process of refinement.  This feedback loop will ultimately cut your
product costs in half.

**Product architecture**

Strategic testing will affect your architecture in positive and drastic ways.  What may have been
buried interfaces become the center of attention.  They become a place for recording the
conversation of the system and running offline analysis tools.  They may also be a place for
monitoring the system health as it is performing its normal operations.

By bring the key interfaces to the forefront you also have opportunities to separate the parts of
the system from each other.  This strategy will lead you to a system that is more loosely coupled.
Recording and playing back data lets you change how the parts of your system are tested.  But it
also lets you optimize how your system is deployed.

Each step that you take lets you make other optimizations.  Each optimization gives you a better
understanding of your system.  Architectural refactoring can greatly extend the life of a system.
Almost every company has a million lines of code that no one can modify. This process is your only
hope to breathing new life into that code.

**Development process**

Strategic testing will have a profound impact on your development process.  You will see a huge
reduction in the time spent on debugging and maintenance.  Developers will begin finding their own
defects rather than someone else having to find them.

Monthly, weekly, and daily testing is used to guarantee that the system always produces the
expected answers.  During development additional testing is used on an hourly basis to confirm that
all of the code being checked in is sound.

As new code is written, developers should be testing it.  This code can be saved so that it runs as
part of the hourly test.  If a developer writes a function with five lines of code, then they should
also write a couple lines of test code. This prevents defects from being introduced in the future.

Building an inventory of test code is a natural result of doing development this way.  It
allows you to pay for the testing at the same time you pay for the development.  Experienced
programmers using this technique will write more features in the product per day.  

Writing the code the first time is about a break-even for the developers.  But automatic tests allow
you to refactor much more aggressively.  The tests provide assurance that you have not broken
anything. Over the entire product lifecyle, automated testing will generate major cost savings.

**Summary**

Adopting the strategic testing mindset can be extremely hard, but it is well worth it.  Strategic
testing enables huge cost savings, by understanding all aspects of your software system. It allows
you to build high-quality from the start, and protects your software investment over the long-term.

Strategic testing is even more important with legacy systems.  The effort can be significant, but the
benefits far outweigh the costs.

Automated testing can free you from the gridlock that so frequently undermines software projects and
release resources to focus on invention and business value. 
