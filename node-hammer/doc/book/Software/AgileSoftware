What is Agile Software?

Agile software is a term that was invented to describe a way to
produce software that recognizes the uncertainty and changing
conditions that affect every software development project.
Traditional software development is done by first writing a large
document that functions as a blueprint for the software to be created.

This approach has two fatal flaws that are addressed by agile
development. First, the document that is produced can take up to 15%
of the budget and 30% of the calendar time of the project.  This
produces no running code and does not truly represent the eventual
system that will be developed.

The second problem is even more serious.  There is no effective way to
evaluate the business value of the software from a specification.  The
software is often built to reflect the specification, but the
specification seldom meets the real customer requirements.  Agile
software addresses both of these issues by focusing on the running
implementation of the system rather than creating a specification.

**Why does it mater?**

The one reason that people care about agile software is to reduce
costs.  There are several reasons why the overall costs are lower:

  * Software matches exact need of customers

  * Testing is done throughout the development causing defect to be eliminated early.

  * Customer sees the highest priority features implemented first and can steer the future development.

  * Functionality is delivered in stages.

  * Risk of non-delivery is completely eliminated.

**How does it work?**

The complete project is broken into a series of "iterations" or
development stages.  Each iteration is fully implemented, tested, and
deployed before going on to the next stage.  Overall project planning
becomes a high-level plan to create the iterations needed.

The development of each iteration begins with the detailed
planning. Shrinking World Solutions and the client will agree on
exactly what features will be implemented in that iteration and how
they will work.  This has a huge benefit of being able to defer
certain design decisions until they are actually needed.  Often the
development of one iteration will help to clarify or modify what is
done in the next.  This also provides an ongoing conversation
throughout the project.

As each iteration is completed you will receive the working, tested,
and deployed code.  Each iteration will produce results that are a
closer approximation to the final product.  Each iteration will create
only those results that are needed, rather than features that we might
choose to use later.  This insures that you are not paying for
development that is not needed in the final product.

Also features are implemented in priority order.  This guarantees that
you get the features first that have the highest business value. As a
client, you will set the priorities of each iteration.

**What can you expect?**

The project will start with an outline of each of the milestones
required.  This gives us a common set of expectations for the overall
project.  We will meet in person to review this plan and discuss any
outstanding issues.

Each iteration will begin by creating a detailed plan for the
functionality that will be delivered.  The iteration will end when the
functionality is fully implemented, tested, and deployed.  We will
meet in person to demonstrate and review the progress, and capture and
desired changes for the next iteration.  The review and planning will
happen during the same meeting.

This frequency of interaction will promote excellent alignment and
allow us to address issues as they surface.  It will create a
practice of open honest communication throughout the project.  I have
used this technique for many years to achieve very satisfying results.
